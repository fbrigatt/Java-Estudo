import javafx.application.Application;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.effect.DropShadow;
import javafx.scene.layout.AnchorPane;
import javafx.scene.paint.Color;
import javafx.stage.Stage;

public class VitrineApp extends Application {

	private AnchorPane pane;
	private TextField txPesquisa;
	private TableView<ItensProperty> tbVitrine;
	private TableColumn<ItensProperty, String> columnProduto;
	private TableColumn<ItensProperty, Double> columnPreco;
	private static ObservableList<ItensProperty> listItens = FXCollections.observableArrayList();
	private static Carrinho carrinho;
	private static Stage stage;

	public static void main(String[] args) {
		launch(args);
	}

	@Override
	public void start(Stage stage) throws Exception {
		initComponents();
		initItens();
		initListeners();

		Scene scene = new Scene(pane);
		stage.setScene(scene);

		stage.setResizable(false);
		stage.setTitle("Vitrine - GolFX");

		stage.show();

		initLayout();

		VitrineApp.stage = stage;
	}

	public void initComponents() {
		this.pane = new AnchorPane();
		this.pane.setPrefSize(800, 600);
		this.pane.setStyle("-fx-background-color: linear-gradient(from 0% 0% to 100% 100%, blue 0%, silver 100%);");

		this.txPesquisa = new TextField();
		this.txPesquisa.setPromptText("Digite o item para pesquisa");
		DropShadow ds = new DropShadow();
		ds.setSpread(0.5);
		// ds.setColor(Color.RED);
		ds.setColor(Color.web("#FF0000"));
		this.txPesquisa.setEffect(ds);

		this.tbVitrine = new TableView<ItensProperty>();
		this.tbVitrine.setPrefSize(780, 550);

		this.columnProduto = new TableColumn<ItensProperty, String>();
		this.columnPreco = new TableColumn<VitrineApp.ItensProperty, Double>();

		this.tbVitrine.getColumns().addAll(columnProduto, columnPreco);

		this.pane.getChildren().addAll(txPesquisa, tbVitrine);

		this.carrinho = new Carrinho();

		columnProduto.setPrefWidth(650);
		columnProduto.setText("Produto");
		columnProduto.setCellValueFactory(new PropertyValueFactory<ItensProperty, String>("produto"));

		columnPreco.setPrefWidth(130);
		columnPreco.setText("Preco");
		columnPreco.setCellValueFactory(new PropertyValueFactory<ItensProperty, Double>("preco"));
	}

	public void initLayout() {
		tbVitrine.setLayoutX((pane.getWidth() - tbVitrine.getWidth()) / 2);
		tbVitrine.setLayoutY(40);

		txPesquisa.setLayoutX(650);
		txPesquisa.setLayoutY(10);
	}

	public void initItens() {
		Vitrine v = new Vitrine();

		v.addProdutos(new Produto("Bola Topper", 15.00), new Produto("Luvas Umbro", 9.00),
				new Produto("Camisa Esportiva", 40.00), new Produto("Chuteira Nike Mercurial", 199.00),
				new Produto("Caneleira Topper", 10.00));

		for (Produto p : v.getProdutos()) {
			listItens.add(new ItensProperty(p.getProduto(), p.getPreco()));
		}

		tbVitrine.setItems(listItens);
	}

	public void initListeners() {

		txPesquisa.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent arg0) {
				if (!txPesquisa.getText().equals("")) {
					tbVitrine.setItems(findItens());
				} else {
					tbVitrine.setItems(listItens);
				}
			}
		});

		tbVitrine.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<ItensProperty>() {
			@Override
			public void changed(ObservableValue<? extends ItensProperty> value, ItensProperty oldItem,
					ItensProperty newItem) {

				/* Indicando os valores de produtos e index para ItemApp */

				// ItemApp.setProduto(new Produto(newItem.getProduto(),
				// newItem.getPreco()));
				// ItemApp.setIndex(tbVitrine.getSelectionModel().getSelectedIndex());
				//
				/// * Chamando o formul√°rio de exibicao do item */
				// try{
				// new ItemApp().start(new Stage());
				// }catch(Exception e){
				// e.printStackTrace();
				// }
			}
		});
	}

	public ObservableList<ItensProperty> findItens() {
		ObservableList<ItensProperty> itensEncontrados = FXCollections.observableArrayList();

		for (ItensProperty itens : listItens) {
			if (itens.getProduto().contains(txPesquisa.getText())) {
				itensEncontrados.add(itens);
			}
		}

		return itensEncontrados;
	}

	public class ItensProperty {
		private SimpleStringProperty produto;
		private SimpleDoubleProperty preco;

		public ItensProperty(String produto, double preco) {
			this.produto = new SimpleStringProperty(produto);
			this.preco = new SimpleDoubleProperty(preco);
		}

		public String getProduto() {
			return produto.get();
		}

		public void setProduto(String produto) {
			this.produto.set(produto);
		}

		public double getPreco() {
			return preco.get();
		}

		public void setPreco(double preco) {
			this.preco.set(preco);
		}
	}

	public static Carrinho getCarrinho() {
		return carrinho;
	}

	public static void setCarrinho(Carrinho carrinho) {
		VitrineApp.carrinho = carrinho;
	}

}